{
    "swagger": "2.0",
    "info": {
        "title": "BNSAPI documentation",
        "contact": {},
        "license": {}
    },
    "paths": {
        "/account/nonce/address/{address}": {
            "get": {
                "description": "Returns nonce and public key registered for a given address if it was ever used.",
                "tags": [
                    "Nonce"
                ],
                "summary": "Returns nonce based on an address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address to query for nonce. ex: iov1qnpaklxv4n6cam7v99hl0tg0dkmu97sh6007un",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/account/nonce/pubkey/{pubKey}": {
            "get": {
                "description": "Returns nonce and public key registered for a given pubkey if it was ever used.",
                "tags": [
                    "Nonce"
                ],
                "summary": "Returns nonce based on an address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Public key to query for nonce. ex: 12ee6f581fe55673a1e9e1382a0829e32075a0aa4763c968bc526e1852e78c95",
                        "name": "pubKey",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/blocks/{blockHeight}": {
            "get": {
                "description": "get block detail by blockHeight",
                "tags": [
                    "Status"
                ],
                "summary": "Get block details by height",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Block Height",
                        "name": "blockHeight",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {},
                    "404": {}
                }
            }
        },
        "/cash/balances": {
            "get": {
                "description": "The iov address may be in the bech32 (iov....) or hex (ON3LK...) format.",
                "tags": [
                    "IOV token"
                ],
                "summary": "returns balance in IOV Token of the given iov address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bech32 or hex representation of an address",
                        "name": "address",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/escrow/escrows": {
            "get": {
                "description": "At most one of the query parameters must exist(excluding offset)",
                "tags": [
                    "IOV token"
                ],
                "summary": "Returns a list of all the smart contract Escrows.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Query prefix encoded as hex",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Source address",
                        "name": "source",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Destination address",
                        "name": "destination",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.MultipleObjectsResponse"
                        }
                    },
                    "400": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/gconf/{extensionName}": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "Get configuration with extension name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Extension name",
                        "name": "extensionName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gconf.Configuration"
                        }
                    },
                    "404": {},
                    "500": {}
                }
            }
        },
        "/gov/proposals": {
            "get": {
                "description": "At most one of the query parameters must exist(excluding offset)",
                "tags": [
                    "Governance"
                ],
                "summary": "Returns a list of x/gov Votes entities.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Author address",
                        "name": "author",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Base64 encoded electorate ID",
                        "name": "electorate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Base64 encoded Elector ID",
                        "name": "elector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Integer Electorate ID",
                        "name": "electorate_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.MultipleObjectsResponse"
                        }
                    },
                    "400": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/gov/votes": {
            "get": {
                "description": "At most one of the query parameters must exist(excluding offset)",
                "tags": [
                    "Governance"
                ],
                "summary": "Returns a list of Votes made on the governance.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Base64 encoded Proposal ID",
                        "name": "proposal",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Integer encoded Proposal ID",
                        "name": "proposal_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Base64 encoded Elector ID",
                        "name": "elector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Integer encoded Elector ID",
                        "name": "elector_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.MultipleObjectsResponse"
                        }
                    },
                    "400": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/info/": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "Returns information about this instance of `bnsapi`.",
                "responses": {
                    "200": {}
                }
            }
        },
        "/msgfee/msgfees": {
            "get": {
                "description": "If msgfee parameter is provided return the queried mesgfee information\notherwise returns all available msgfees",
                "tags": [
                    "Message Fee"
                ],
                "summary": "Return message fee information based on message path: username/register_token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ex: username/register_token",
                        "name": "msgfee",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/msgfee.MsgFee"
                        }
                    },
                    "404": {},
                    "500": {}
                }
            }
        },
        "/multisig/contracts": {
            "get": {
                "description": "At most one of the query parameters must exist(excluding offset)",
                "tags": [
                    "IOV token"
                ],
                "summary": "Returns a list of all the multisig Contracts.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Return objects with keys that start with given prefix",
                        "name": "prefix",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.MultipleObjectsResponse"
                        }
                    },
                    "404": {},
                    "500": {}
                }
            }
        },
        "/tx/submit": {
            "post": {
                "description": "Submit transaction to the blockchain",
                "consumes": [
                    "text/plain"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Submit transaction",
                "parameters": [
                    {
                        "description": "base64 encoded transaction",
                        "name": "tx",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {},
                    "404": {}
                }
            }
        },
        "/username/owner/{address}": {
            "get": {
                "tags": [
                    "Starname"
                ],
                "summary": "Returns the username object with associated info for an owner",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address. example: 04C3DB7CCCACF58EEFCC296FF7AD0F6DB7C2FA17 or iov1qnpaklxv4n6cam7v99hl0tg0dkmu97sh6007un",
                        "name": "address",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/username.Token"
                        }
                    },
                    "404": {},
                    "500": {}
                }
            }
        },
        "/username/resolve/{username}": {
            "get": {
                "tags": [
                    "Starname"
                ],
                "summary": "Returns the username object with associated info for an iov username, like thematrix*iov",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username. example: thematrix*iov",
                        "name": "username",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/username.Token"
                        }
                    },
                    "404": {},
                    "500": {}
                }
            }
        }
    },
    "definitions": {
        "coin.Coin": {
            "type": "object",
            "properties": {
                "fractional": {
                    "description": "Billionth of coins. 0 \u003c= abs(fractional) \u003c 10^9\nIf fractional != 0, must have same sign as integer",
                    "type": "integer"
                },
                "ticker": {
                    "description": "Ticker is 3-4 upper-case letters and\nall Coins of the same currency can be combined",
                    "type": "string"
                },
                "whole": {
                    "description": "Whole coins, -10^15 \u003c integer \u003c 10^15",
                    "type": "integer"
                }
            }
        },
        "gconf.Configuration": {
            "type": "object"
        },
        "handlers.MultipleObjectsResponse": {
            "type": "object",
            "properties": {
                "objects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/util.KeyValue"
                    }
                }
            }
        },
        "msgfee.MsgFee": {
            "type": "object",
            "properties": {
                "fee": {
                    "type": "object",
                    "$ref": "#/definitions/coin.Coin"
                },
                "metadata": {
                    "type": "object",
                    "$ref": "#/definitions/weave.Metadata"
                },
                "msg_path": {
                    "type": "string"
                }
            }
        },
        "orm.Model": {
            "type": "object"
        },
        "username.BlockchainAddress": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "An address on the specified blockchain network. Address is not a\nweave.Address as we cannot know what is the format of an address on the\nchain that this token instance links to. Because we do not know the rules\nto validate an address for any blockchain ID, this is an arbitrary bulk of\ndata.\nIt is more convinient to always use encoded representation of each address\nand store it as a string. Using bytes while compact is not as comfortable\nto use.",
                    "type": "string"
                },
                "blockchain_id": {
                    "description": "An arbitrary blockchain ID.",
                    "type": "string"
                }
            }
        },
        "username.Token": {
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "object",
                    "$ref": "#/definitions/weave.Metadata"
                },
                "owner": {
                    "description": "Owner is a weave.Address that controls this token. Only the owner can\nmodify a username token.",
                    "type": "object",
                    "$ref": "#/definitions/weave.Address"
                },
                "targets": {
                    "description": "Targets specifies where this username token points to. This must be at\nleast one blockchain address elemenet.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/username.BlockchainAddress"
                    }
                }
            }
        },
        "util.KeyValue": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "object",
                    "$ref": "#/definitions/util.hexbytes"
                },
                "value": {
                    "type": "object",
                    "$ref": "#/definitions/orm.Model"
                }
            }
        },
        "util.hexbytes": {
            "type": "array",
            "items": {
                "type": "integer"
            }
        },
        "weave.Address": {
            "type": "array",
            "items": {
                "type": "integer"
            }
        },
        "weave.Metadata": {
            "type": "object",
            "properties": {
                "schema": {
                    "type": "integer"
                }
            }
        }
    }
}