{
    "swagger": "2.0",
    "info": {
        "title": "BNSAPI documentation",
        "contact": {},
        "license": {}
    },
    "paths": {
        "/account/accounts": {
            "get": {
                "description": "The list is either the list of all the starname for a given premium starname ex: *cocacola, or the list of all starnames for a given owner.",
                "tags": [
                    "Starname"
                ],
                "summary": "Returns a list of `bnsd/x/account` entities.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Premium Starname ex: *cocacola",
                        "name": "domainKey",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Owner address",
                        "name": "ownerKey",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    }
                }
            }
        },
        "/account/domains/": {
            "get": {
                "description": "The list of all premium starname for a given owner.\nThe owner address may be in the bech32 (iov....) or hex (ON3LK...) format.",
                "tags": [
                    "Starname"
                ],
                "summary": "Returns a list of `bnsd/x/domain` entities.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address of the admin",
                        "name": "admin",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    }
                }
            }
        },
        "/account/resolve/{starname}": {
            "get": {
                "description": "Resolve a given *starname and return all metadata related to this starname,\nlist of crypto-addresses (targets), expiration date and owner of the starname.",
                "tags": [
                    "Starname"
                ],
                "summary": "Resolve a starname and returns a `bnsd/x/account` entity.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "starname ex: bobby*cocacola",
                        "name": "starname",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    }
                }
            }
        },
        "/blocks/{blockHeight}": {
            "get": {
                "description": "get block detail by blockHeight",
                "tags": [
                    "Status"
                ],
                "summary": "Get block details by height",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Block Height",
                        "name": "blockHeight",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {},
                    "404": {}
                }
            }
        },
        "/cash/balances": {
            "get": {
                "description": "The iov address may be in the bech32 (iov....) or hex (ON3LK...) format.",
                "tags": [
                    "IOV token"
                ],
                "summary": "returns balance in IOV Token of the given iov address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bech32 or hex representation of an address",
                        "name": "address",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Bech32 or hex representation of an address to be used as offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/escrow/escrows": {
            "get": {
                "description": "At most one of the query parameters must exist(excluding offset)",
                "tags": [
                    "IOV token"
                ],
                "summary": "Returns a list of all the smart contract Escrows.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Source address",
                        "name": "source",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Destination address",
                        "name": "destination",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {},
                    "400": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/gconf/{extensionName}": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "Get configuration with extension name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Extension name",
                        "name": "extensionName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/gov/proposals": {
            "get": {
                "description": "At most one of the query parameters must exist(excluding offset)",
                "tags": [
                    "Governance"
                ],
                "summary": "Returns a list of x/gov Votes entities.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Author address",
                        "name": "author",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Base64 encoded electorate ID",
                        "name": "electorate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Base64 encoded Elector ID",
                        "name": "elector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Elector ID",
                        "name": "electorID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {},
                    "400": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/gov/votes": {
            "get": {
                "description": "At most one of the query parameters must exist(excluding offset)",
                "tags": [
                    "Governance"
                ],
                "summary": "Returns a list of Votes made on the governance.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Base64 encoded Proposal ID",
                        "name": "proposal",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Proposal ID",
                        "name": "proposalID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Base64 encoded Elector ID",
                        "name": "elector",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Elector ID",
                        "name": "electorID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {},
                    "400": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/info/": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "Returns information about this instance of `bnsapi`.",
                "responses": {
                    "200": {}
                }
            }
        },
        "/multisig/contracts": {
            "get": {
                "description": "At most one of the query parameters must exist(excluding offset)",
                "tags": [
                    "IOV token"
                ],
                "summary": "Returns a list of all the multisig Contracts.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/termdeposit/contracts": {
            "get": {
                "description": "The term deposit Contract are the contract defining the dates until which one can deposit.",
                "tags": [
                    "IOV token"
                ],
                "summary": "Returns a list of bnsd/x/termdeposit entities.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "500": {}
                }
            }
        },
        "/termdeposit/deposits": {
            "get": {
                "description": "At most one of the query parameters must exist (excluding offset).\nThe query can be made by Depositor, in which case it returns all the deposits from the Depositor.\nThe query can be made by Deposit Contract, in which case it returns all the deposits from this Contract.\nThe query can be made by Contract ID, in which case it returns the deposits from the Deposit Contract with this ID.",
                "tags": [
                    "IOV token"
                ],
                "summary": "Returns a list of bnsd/x/termdeposit Deposit entities.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Depositor address",
                        "name": "depositor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Base64 encoded ID",
                        "name": "contract",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Contract ID as integer",
                        "name": "contract_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "500": {}
                }
            }
        }
    },
    "definitions": {
        "json.RawMessage": {
            "type": "array",
            "items": {
                "type": "integer"
            }
        }
    }
}