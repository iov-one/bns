definitions:
  coin.Coin:
    properties:
      fractional:
        description: |-
          Billionth of coins. 0 <= abs(fractional) < 10^9
          If fractional != 0, must have same sign as integer
        type: integer
      ticker:
        description: |-
          Ticker is 3-4 upper-case letters and
          all Coins of the same currency can be combined
        type: string
      whole:
        description: Whole coins, -10^15 < integer < 10^15
        type: integer
    type: object
  gconf.Configuration:
    type: object
  handlers.MultipleObjectsResponse:
    properties:
      objects:
        items:
          $ref: '#/definitions/util.KeyValue'
        type: array
    type: object
  msgfee.MsgFee:
    properties:
      fee:
        $ref: '#/definitions/coin.Coin'
        type: object
      metadata:
        $ref: '#/definitions/weave.Metadata'
        type: object
      msg_path:
        type: string
    type: object
  orm.Model:
    type: object
  username.BlockchainAddress:
    properties:
      address:
        description: |-
          An address on the specified blockchain network. Address is not a
          weave.Address as we cannot know what is the format of an address on the
          chain that this token instance links to. Because we do not know the rules
          to validate an address for any blockchain ID, this is an arbitrary bulk of
          data.
          It is more convinient to always use encoded representation of each address
          and store it as a string. Using bytes while compact is not as comfortable
          to use.
        type: string
      blockchain_id:
        description: An arbitrary blockchain ID.
        type: string
    type: object
  username.Token:
    properties:
      metadata:
        $ref: '#/definitions/weave.Metadata'
        type: object
      owner:
        $ref: '#/definitions/weave.Address'
        description: |-
          Owner is a weave.Address that controls this token. Only the owner can
          modify a username token.
        type: object
      targets:
        description: |-
          Targets specifies where this username token points to. This must be at
          least one blockchain address elemenet.
        items:
          $ref: '#/definitions/username.BlockchainAddress'
        type: array
    type: object
  util.KeyValue:
    properties:
      key:
        $ref: '#/definitions/util.hexbytes'
        type: object
      value:
        $ref: '#/definitions/orm.Model'
        type: object
    type: object
  util.hexbytes:
    items:
      type: integer
    type: array
  weave.Address:
    items:
      type: integer
    type: array
  weave.Metadata:
    properties:
      schema:
        type: integer
    type: object
info:
  contact: {}
  license: {}
  title: BNSAPI documentation
paths:
  /account/nonce/address/{address}:
    get:
      description: Returns nonce and public key registered for a given address if
        it was ever used.
      parameters:
      - description: 'Address to query for nonce. ex: iov1qnpaklxv4n6cam7v99hl0tg0dkmu97sh6007un'
        in: path
        name: address
        required: true
        type: string
      responses:
        "200": {}
        "404": {}
        "500": {}
      summary: Returns nonce based on an address
      tags:
      - Nonce
  /account/nonce/pubkey/{pubKey}:
    get:
      description: Returns nonce and public key registered for a given pubkey if it
        was ever used.
      parameters:
      - description: 'Public key to query for nonce. ex: 12ee6f581fe55673a1e9e1382a0829e32075a0aa4763c968bc526e1852e78c95'
        in: path
        name: pubKey
        required: true
        type: string
      responses:
        "200": {}
        "404": {}
        "500": {}
      summary: Returns nonce based on an address
      tags:
      - Nonce
  /blocks/{blockHeight}:
    get:
      description: get block detail by blockHeight
      parameters:
      - description: Block Height
        in: path
        name: blockHeight
        required: true
        type: integer
      responses:
        "200": {}
        "404": {}
      summary: Get block details by height
      tags:
      - Status
  /cash/balances:
    get:
      description: The iov address may be in the bech32 (iov....) or hex (ON3LK...)
        format.
      parameters:
      - description: Bech32 or hex representation of an address
        in: query
        name: address
        type: string
      - description: Pagination offset
        in: query
        name: offset
        type: integer
      responses:
        "200": {}
        "404": {}
        "500": {}
      summary: returns balance in IOV Token of the given iov address
      tags:
      - IOV token
  /escrow/escrows:
    get:
      description: At most one of the query parameters must exist(excluding offset)
      parameters:
      - description: Query prefix encoded as hex
        in: query
        name: prefix
        type: string
      - description: Source address
        in: query
        name: source
        type: string
      - description: Destination address
        in: query
        name: destination
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MultipleObjectsResponse'
        "400": {}
        "404": {}
        "500": {}
      summary: Returns a list of all the smart contract Escrows.
      tags:
      - IOV token
  /gconf/{extensionName}:
    get:
      parameters:
      - description: Extension name
        in: path
        name: extensionName
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gconf.Configuration'
        "404": {}
        "500": {}
      summary: Get configuration with extension name
      tags:
      - Status
  /gov/proposals:
    get:
      description: At most one of the query parameters must exist(excluding offset)
      parameters:
      - description: Author address
        in: query
        name: author
        type: string
      - description: Base64 encoded electorate ID
        in: query
        name: electorate
        type: string
      - description: Base64 encoded Elector ID
        in: query
        name: elector
        type: string
      - description: Integer Electorate ID
        in: query
        name: electorate_id
        type: integer
      - description: Pagination offset
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MultipleObjectsResponse'
        "400": {}
        "404": {}
        "500": {}
      summary: Returns a list of x/gov Votes entities.
      tags:
      - Governance
  /gov/votes:
    get:
      description: At most one of the query parameters must exist(excluding offset)
      parameters:
      - description: Base64 encoded Proposal ID
        in: query
        name: proposal
        type: string
      - description: Integer encoded Proposal ID
        in: query
        name: proposal_id
        type: integer
      - description: Base64 encoded Elector ID
        in: query
        name: elector
        type: string
      - description: Integer encoded Elector ID
        in: query
        name: elector_id
        type: integer
      - description: Pagination offset
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MultipleObjectsResponse'
        "400": {}
        "404": {}
        "500": {}
      summary: Returns a list of Votes made on the governance.
      tags:
      - Governance
  /info/:
    get:
      responses:
        "200": {}
      summary: Returns information about this instance of `bnsapi`.
      tags:
      - Status
  /msgfee/msgfees:
    get:
      description: |-
        If msgfee parameter is provided return the queried mesgfee information
        otherwise returns all available msgfees
      parameters:
      - description: 'ex: username/register_token'
        in: query
        name: msgfee
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/msgfee.MsgFee'
        "404": {}
        "500": {}
      summary: 'Return message fee information based on message path: username/register_token'
      tags:
      - Message Fee
  /multisig/contracts:
    get:
      description: At most one of the query parameters must exist(excluding offset)
      parameters:
      - description: Return objects with keys that start with given prefix
        in: query
        name: prefix
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MultipleObjectsResponse'
        "404": {}
        "500": {}
      summary: Returns a list of all the multisig Contracts.
      tags:
      - IOV token
  /tx/submit:
    post:
      consumes:
      - text/plain
      description: Submit transaction to the blockchain
      parameters:
      - description: base64 encoded transaction
        in: body
        name: tx
        required: true
        schema:
          type: string
      responses:
        "200": {}
        "404": {}
      summary: Submit transaction
      tags:
      - Transaction
  /username/owner/{address}:
    get:
      parameters:
      - description: 'Address. example: 04C3DB7CCCACF58EEFCC296FF7AD0F6DB7C2FA17 or
          iov1qnpaklxv4n6cam7v99hl0tg0dkmu97sh6007un'
        in: path
        name: address
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/username.Token'
        "404": {}
        "500": {}
      summary: Returns the username object with associated info for an owner
      tags:
      - Starname
  /username/resolve/{username}:
    get:
      parameters:
      - description: 'username. example: thematrix*iov'
        in: path
        name: username
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/username.Token'
        "404": {}
        "500": {}
      summary: Returns the username object with associated info for an iov username,
        like thematrix*iov
      tags:
      - Starname
swagger: "2.0"
