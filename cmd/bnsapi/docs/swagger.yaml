definitions:
  account.Account:
    properties:
      certificates:
        items:
          items:
            type: integer
          type: array
        type: array
      domain:
        description: Domain references a domain that this account belongs to.
        type: string
      metadata:
        $ref: '#/definitions/weave.Metadata'
        type: object
      name:
        type: string
      owner:
        $ref: '#/definitions/weave.Address'
        description: |-
          Owner is a weave.Address that controls this account. Can be empty.

          An account can be administrated by the domain admin. In addition,
          ownership can be assigned to an address to allow another party to manage
          selected account.
        type: object
      targets:
        items:
          $ref: '#/definitions/account.BlockchainAddress'
        type: array
      valid_until:
        description: |-
          Valid until defines the expiration date for the account. Expired account
          cannot be used or modified. This date is always considered in context of
          the domain that this account belongs. Expired domain expires all belonging
          accounts as well, event if that account valid until date is not yet due.
        type: integer
    type: object
  account.BlockchainAddress:
    properties:
      address:
        description: |-
          An address on the specified blockchain network. Address is not a
          weave.Address as we cannot know what is the format of an address on the
          chain that this token instance links to. Because we do not know the rules
          to validate an address for any blockchain ID, this is an arbitrary bulk of
          data.
          It is more convenient to always use encoded representation of each address
          and store it as a string. Using bytes while compact is not as comfortable
          to use.
        type: string
      blockchain_id:
        description: An arbitrary blockchain ID.
        type: string
    type: object
  handlers.KeyValue:
    properties:
      key:
        $ref: '#/definitions/handlers.hexbytes'
        type: object
      value:
        $ref: '#/definitions/orm.Model'
        type: object
    type: object
  handlers.MultipleObjectsResponse:
    properties:
      objects:
        items:
          $ref: '#/definitions/handlers.KeyValue'
        type: array
    type: object
  handlers.hexbytes:
    items:
      type: integer
    type: array
  orm.Model:
    type: object
  username.BlockchainAddress:
    properties:
      address:
        description: |-
          An address on the specified blockchain network. Address is not a
          weave.Address as we cannot know what is the format of an address on the
          chain that this token instance links to. Because we do not know the rules
          to validate an address for any blockchain ID, this is an arbitrary bulk of
          data.
          It is more convinient to always use encoded representation of each address
          and store it as a string. Using bytes while compact is not as comfortable
          to use.
        type: string
      blockchain_id:
        description: An arbitrary blockchain ID.
        type: string
    type: object
  username.Token:
    properties:
      metadata:
        $ref: '#/definitions/weave.Metadata'
        type: object
      owner:
        $ref: '#/definitions/weave.Address'
        description: |-
          Owner is a weave.Address that controls this token. Only the owner can
          modify a username token.
        type: object
      targets:
        description: |-
          Targets specifies where this username token points to. This must be at
          least one blockchain address elemenet.
        items:
          $ref: '#/definitions/username.BlockchainAddress'
        type: array
    type: object
  weave.Address:
    items:
      type: integer
    type: array
  weave.Metadata:
    properties:
      schema:
        type: integer
    type: object
info:
  contact: {}
  license: {}
  title: BNSAPI documentation
paths:
  /account/accounts:
    get:
      description: |
        The list is either the list of all the starname (orkun*neuma) for a given premium starname (*neuma), or the list of all starnames for a given owner address.
        You need to provide exactly one argument, either the premium starname (*neuma) or the owner address.
      parameters:
      - description: 'Premium Starname ex: *neuma'
        in: query
        name: starname
        type: string
      - description: The owner address format is either in iov address (iov1c9eprq0gxdmwl9u25j568zj7ylqgc7ajyu8wxr)
          or hex (C1721181E83376EF978AA4A9A38A5E27C08C7BB2)
        in: query
        name: ownerAddress
        type: string
      - description: Pagination offset
        in: query
        name: offset
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MultipleObjectsResponse'
        "404": {}
        "500": {}
      summary: Returns a list of `bnsd/x/account` entities (like orkun*neuma).
      tags:
      - Starname
  /account/domains/:
    get:
      description: |-
        The list of all premium starnames for a given admin.
        If no admin address is provided, you get the list of all premium starnames.
      parameters:
      - description: The admin address may be in the bech32 (iov1c9eprq0gxdmwl9u25j568zj7ylqgc7ajyu8wxr)
          or hex (C1721181E83376EF978AA4A9A38A5E27C08C7BB2) format.
        in: query
        name: adminAddress
        type: string
      - description: Pagination offset
        in: query
        name: offset
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MultipleObjectsResponse'
        "404": {}
      summary: Returns a list of `bnsd/x/domain` entities (like *neuma).
      tags:
      - Starname
  /account/resolve/{starname}:
    get:
      description: |-
        Resolve a given starname (like orkun*neuma) and return all metadata related to this starname,
        list of crypto-addresses (targets), expiration date and owner address of the starname.
      parameters:
      - description: 'starname ex: orkun*neuma'
        in: path
        name: starname
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.Account'
        "404": {}
        "500": {}
      summary: Resolve a starname (orkun*neuma) and returns a `bnsd/x/account` entity
        (the associated info).
      tags:
      - Starname
  /blocks/{blockHeight}:
    get:
      description: get block detail by blockHeight
      parameters:
      - description: Block Height
        in: path
        name: blockHeight
        required: true
        type: integer
      responses:
        "200": {}
        "404": {}
      summary: Get block details by height
      tags:
      - Status
  /cash/balances:
    get:
      description: The iov address may be in the bech32 (iov....) or hex (ON3LK...)
        format.
      parameters:
      - description: Bech32 or hex representation of an address
        in: path
        name: address
        type: string
      - description: Bech32 or hex representation of an address to be used as offset
        in: query
        name: offset
        type: string
      responses:
        "200": {}
        "404": {}
        "500": {}
      summary: returns balance in IOV Token of the given iov address
      tags:
      - IOV token
  /escrow/escrows:
    get:
      description: At most one of the query parameters must exist(excluding offset)
      parameters:
      - description: Iteration offset
        in: query
        name: offset
        type: string
      - description: Source address
        in: query
        name: source
        type: string
      - description: Destination address
        in: query
        name: destination
        type: string
      responses:
        "200": {}
        "400": {}
        "404": {}
        "500": {}
      summary: Returns a list of all the smart contract Escrows.
      tags:
      - IOV token
  /gconf/{extensionName}:
    get:
      parameters:
      - description: Extension name
        in: path
        name: extensionName
        required: true
        type: string
      responses:
        "200": {}
        "404": {}
        "500": {}
      summary: Get configuration with extension name
      tags:
      - Status
  /gov/proposals:
    get:
      description: At most one of the query parameters must exist(excluding offset)
      parameters:
      - description: Author address
        in: query
        name: author
        type: string
      - description: Base64 encoded electorate ID
        in: query
        name: electorate
        type: string
      - description: Base64 encoded Elector ID
        in: query
        name: elector
        type: string
      - description: Elector ID
        in: query
        name: electorID
        type: integer
      responses:
        "200": {}
        "400": {}
        "404": {}
        "500": {}
      summary: Returns a list of x/gov Votes entities.
      tags:
      - Governance
  /gov/votes:
    get:
      description: At most one of the query parameters must exist(excluding offset)
      parameters:
      - description: Base64 encoded Proposal ID
        in: query
        name: proposal
        type: string
      - description: Proposal ID
        in: query
        name: proposalID
        type: integer
      - description: Base64 encoded Elector ID
        in: query
        name: elector
        type: string
      - description: Elector ID
        in: query
        name: electorID
        type: integer
      responses:
        "200": {}
        "400": {}
        "404": {}
        "500": {}
      summary: Returns a list of Votes made on the governance.
      tags:
      - Governance
  /info/:
    get:
      responses:
        "200": {}
      summary: Returns information about this instance of `bnsapi`.
      tags:
      - Status
  /multisig/contracts:
    get:
      description: At most one of the query parameters must exist(excluding offset)
      parameters:
      - description: Iteration offset
        in: query
        name: offset
        type: string
      responses:
        "200": {}
        "404": {}
        "500": {}
      summary: Returns a list of all the multisig Contracts.
      tags:
      - IOV token
  /termdeposit/contracts:
    get:
      description: The term deposit Contract are the contract defining the dates until
        which one can deposit.
      parameters:
      - description: Pagination offset
        in: query
        name: offset
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MultipleObjectsResponse'
        "404": {}
        "500": {}
      summary: Returns a list of bnsd/x/termdeposit entities.
      tags:
      - IOV token
  /termdeposit/deposits:
    get:
      description: |-
        At most one of the query parameters must exist (excluding offset).
        The query may be filtered by Depositor, in which case it returns all the deposits from the Depositor.
        The query may be filtered by Deposit Contract, in which case it returns all the deposits from this Contract.
        The query may be filtered by Contract ID, in which case it returns the deposits from the Deposit Contract with this ID.
      parameters:
      - description: Depositor address in bech32 (iov1c9eprq0gxdmwl9u25j568zj7ylqgc7ajyu8wxr)
          or hex(C1721181E83376EF978AA4A9A38A5E27C08C7BB2)
        in: query
        name: depositor
        type: string
      - description: Base64 encoded ID
        in: query
        name: contract
        type: string
      - description: Contract ID as integer
        in: query
        name: contract_id
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MultipleObjectsResponse'
        "404": {}
        "500": {}
      summary: Returns a list of bnsd/x/termdeposit Deposit entities (individual deposits).
      tags:
      - IOV token
  /username/owner/{address}:
    get:
      parameters:
      - description: 'Address. example: C1721181E83376EF978AA4A9A38A5E27C08C7BB2 or
          iov1c9eprq0gxdmwl9u25j568zj7ylqgc7ajyu8wxr'
        in: path
        name: owner
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/username.Token'
        "404": {}
        "500": {}
      summary: Returns the username object with associated info for an owner
      tags:
      - Starname
  /username/resolve/{username}:
    get:
      parameters:
      - description: 'username. example: thematrix*iov'
        in: path
        name: username
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/username.Token'
        "404": {}
        "500": {}
      summary: Returns the username object with associated info for an iov username,
        like thematrix*iov
      tags:
      - Starname
swagger: "2.0"
