// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-02-18 21:24:25.886482 +0100 CET m=+2.357799085

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/account/accounts": {
            "get": {
                "description": "At most one of the query parameters must exist(excluding offset)",
                "tags": [
                    "Starname"
                ],
                "summary": "Returns a list of ` + "`" + `bnsd/x/account` + "`" + ` Account entitiy.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HostPort name",
                        "name": "domainKey",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Admin address",
                        "name": "ownerKey",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    }
                }
            }
        },
        "/account/accounts/{accountKey}": {
            "get": {
                "description": "The list is either the list of all usernames for a given *starname, or the list of all *starnames for a given owner.\nThe owner address may be in the bech32 (iov....) or hex (ON3LK...) format.",
                "tags": [
                    "Starname"
                ],
                "summary": "Returns a list of ` + "`" + `bnsd/x/account` + "`" + ` which are the username*starnames.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address of the admin",
                        "name": "accountKey",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    }
                }
            }
        },
        "/account/domains/": {
            "get": {
                "description": "Returns the list of all starnames for a given iov address.\nThe owner address may be in the bech32 (iov....) or hex (ON3LK...) format.",
                "tags": [
                    "Starname"
                ],
                "summary": "Returns a list of ` + "`" + `bnsd/x/account` + "`" + ` starnames entities.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address of the admin",
                        "name": "admin",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Iteration offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    }
                }
            }
        },
        "/blocks/{blockHeight}": {
            "get": {
                "description": "get block detail by blockHeight",
                "tags": [
                    "Status"
                ],
                "summary": "Get block details by height",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Block Height",
                        "name": "blockHeight",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {},
                    "404": {}
                }
            }
        },
        "/cash/balances": {
            "get": {
                "description": "The iov address may be in the bech32 (iov....) or hex (ON3LK...) format.",
                "tags": [
                    "IOV token"
                ],
                "summary": "returns balance in IOV Token of the given iov address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bech32 or hex representation of an address",
                        "name": "address",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Bech32 or hex representation of an address to be used as offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/escrow/escrows": {
            "get": {
                "description": "At most one of the query parameters must exist(excluding offset)",
                "tags": [
                    "IOV token"
                ],
                "summary": "Returns a list of all the smart contract Escrows.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Iteration offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Source address",
                        "name": "source",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Destination address",
                        "name": "destination",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {},
                    "400": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/gconf/{extensionName}": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "Get configuration with extension name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Extension name",
                        "name": "extensionName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/info/": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "Returns information about this instance of ` + "`" + `bnsapi` + "`" + `.",
                "responses": {
                    "200": {}
                }
            }
        },
        "/multisig/contracts": {
            "get": {
                "description": "At most one of the query parameters must exist(excluding offset)",
                "tags": [
                    "IOV token"
                ],
                "summary": "Returns a list of all the multisig Contracts.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Iteration offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {},
                    "404": {},
                    "500": {}
                }
            }
        },
        "/termdeposit/contracts": {
            "get": {
                "description": "The term deposit Contract are the contract defining the dates until which one can deposit.",
                "tags": [
                    "IOV token"
                ],
                "summary": "Returns a list of bnsd/x/termdeposit Contract entities.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Iteration offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "500": {}
                }
            }
        },
        "/termdeposit/deposits": {
            "get": {
                "description": "At most one of the query parameters must exist (excluding offset).\nThe query can be made by Depositor, in which case it returns all the deposits from the Depositor.\nThe query can be made by Deposit Contract, in which case it returns all the deposits from this Contract.\nThe query can be made by Contract ID, in which case it returns the deposits from the Deposit Contract with this ID.",
                "tags": [
                    "IOV token"
                ],
                "summary": "Returns a list of bnsd/x/termdeposit Deposit entities.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Depositor address",
                        "name": "depositor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Base64 encoded ID",
                        "name": "contract",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Contract ID as integer",
                        "name": "contract_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/json.RawMessage"
                        }
                    },
                    "500": {}
                }
            }
        },
        "/username/owner/{ownerAddress}": {
            "get": {
                "description": "The iov address may be in the bech32 (iov....) or hex (ON3LK...) format.",
                "tags": [
                    "Starname"
                ],
                "summary": "Returns the list of iov username (like bob*iov) owned by this iov address.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bech32 or hex representation of an address",
                        "name": "ownerAddress",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/username.Token"
                        }
                    },
                    "404": {},
                    "500": {}
                }
            }
        },
        "/username/resolve/{username}": {
            "get": {
                "tags": [
                    "Starname"
                ],
                "summary": "Returns the username object with associated info for an iov username, like bob*iov",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username. example: bob*iov",
                        "name": "username",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/username.Token"
                        }
                    },
                    "404": {},
                    "500": {}
                }
            }
        }
    },
    "definitions": {
        "json.RawMessage": {
            "type": "array",
            "items": {
                "type": "integer"
            }
        },
        "username.Token": {
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "BlockchainAddress"
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "BNSAPI documentation",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
